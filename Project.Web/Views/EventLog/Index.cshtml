@{
    ViewData["Title"] = "Логи системы";
}

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h2>Логи системы</h2>
            <p class="lead">Последние события и операции в системе</p>
        </div>
        <div class="col-auto">
            <div class="btn-group">
                <button type="button" class="btn btn-primary" onclick="refreshLogs()">
                    <i class="bi bi-arrow-clockwise"></i> Обновить
                </button>
                <button type="button" class="btn btn-outline-success" id="autoRefreshBtn" onclick="toggleAutoRefresh()">
                    <i class="bi bi-play"></i> Автообновление
                </button>
                <button type="button" class="btn btn-outline-danger" onclick="clearOldLogs()">
                    <i class="bi bi-trash"></i> Очистить старые
                </button>
            </div>
        </div>
    </div>

    <!-- Фильтры -->
    <div class="row mb-3">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <label class="form-label">Тип события</label>
                            <select class="form-select form-select-sm" id="eventTypeFilter">
                                <option value="">Все события</option>
                                <option value="Started">Запуск</option>
                                <option value="Completed">Завершение</option>
                                <option value="Paused">Приостановка</option>
                                <option value="Resumed">Возобновление</option>
                                <option value="Assigned">Назначение</option>
                                <option value="Error">Ошибки</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Автоматические</label>
                            <select class="form-select form-select-sm" id="automaticFilter">
                                <option value="">Все</option>
                                <option value="true">Да</option>
                                <option value="false">Нет</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">За период</label>
                            <select class="form-select form-select-sm" id="timeFilter">
                                <option value="1">Последний час</option>
                                <option value="6">Последние 6 часов</option>
                                <option value="24" selected>Последние 24 часа</option>
                                <option value="168">Последняя неделя</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <button type="button" class="btn btn-outline-primary btn-sm mt-4" onclick="applyFilters()">
                                <i class="bi bi-funnel"></i> Применить
                            </button>
                        </div>
                        <div class="col-md-2">
                            <div class="mt-4">
                                <small class="text-muted">
                                    Всего событий: <span id="totalEventsCount">0</span>
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Логи -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body p-0">
                    <div id="logsContainer" style="max-height: 70vh; overflow-y: auto;">
                        <div class="text-center p-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Загрузка...</span>
                            </div>
                            <p class="mt-3">Загрузка логов...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно деталей события -->
<div class="modal fade" id="eventDetailModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Детали события</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="eventDetailContent">
                <!-- Содержимое загружается через JS -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let autoRefreshInterval;
        let isAutoRefresh = false;

        $(document).ready(function () {
            loadLogs();

            // Настройка фильтров
            $('#eventTypeFilter, #automaticFilter, #timeFilter').change(function () {
                applyFilters();
            });
        });

        // Загрузка логов с сервера
        function loadLogs() {
            const params = new URLSearchParams({
                eventType: $('#eventTypeFilter').val() || '',
                isAutomatic: $('#automaticFilter').val() || '',
                hours: $('#timeFilter').val() || '24'
            });

            $.get(`/api/logs/stage-events?${params.toString()}`)
                .done(function (data) {
                    renderLogs(data.events || []);
                    $('#totalEventsCount').text(data.total || 0);
                })
                .fail(function () {
                    $('#logsContainer').html(`
                                <div class="alert alert-danger m-3">
                                    <i class="bi bi-exclamation-triangle"></i>
                                    Ошибка при загрузке логов. <a href="#" onclick="loadLogs()">Попробовать снова</a>
                                </div>
                            `);
                });
        }

        // Отображение логов
        function renderLogs(events) {
            const container = $('#logsContainer');

            if (!events || events.length === 0) {
                container.html(`
                            <div class="text-center p-5">
                                <i class="bi bi-journal-x" style="font-size: 3rem; color: #6c757d;"></i>
                                <h4 class="mt-3">Нет событий</h4>
                                <p class="text-muted">За выбранный период событий не найдено</p>
                            </div>
                        `);
                return;
            }

            let html = '<div class="timeline p-3">';

            // Группируем события по дням
            const groupedByDay = groupEventsByDay(events);

            Object.keys(groupedByDay).forEach(day => {
                html += `<div class="timeline-day mb-4">`;
                html += `<h6 class="text-muted border-bottom pb-2 mb-3">${day}</h6>`;

                groupedByDay[day].forEach(event => {
                    html += renderEventItem(event);
                });

                html += `</div>`;
            });

            html += '</div>';
            container.html(html);
        }

        // Группировка событий по дням
        function groupEventsByDay(events) {
            const grouped = {};

            events.forEach(event => {
                const eventDate = new Date(event.eventTime);
                const today = new Date();
                const yesterday = new Date(today);
                yesterday.setDate(yesterday.getDate() - 1);

                let dayKey;
                if (isSameDay(eventDate, today)) {
                    dayKey = 'Сегодня';
                } else if (isSameDay(eventDate, yesterday)) {
                    dayKey = 'Вчера';
                } else {
                    dayKey = eventDate.toLocaleDateString('ru-RU', {
                        day: 'numeric',
                        month: 'long',
                        weekday: 'long'
                    });
                }

                if (!grouped[dayKey]) {
                    grouped[dayKey] = [];
                }
                grouped[dayKey].push(event);
            });

            return grouped;
        }

        // Проверка, что даты в один день
        function isSameDay(date1, date2) {
            return date1.getDate() === date2.getDate() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getFullYear() === date2.getFullYear();
        }

        // Отображение одного события
        function renderEventItem(event) {
            const time = new Date(event.eventTime).toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });

            const eventIcon = getEventIcon(event.eventType);
            const eventColor = getEventColor(event.eventType);
            const isAutomatic = event.isAutomatic;

            return `
                        <div class="timeline-item d-flex mb-3 ${isAutomatic ? 'opacity-75' : ''}"
                             onclick="showEventDetail(${event.id})"
                             style="cursor: pointer;">
                            <div class="timeline-marker me-3">
                                <div class="timeline-icon bg-${eventColor}" style="width: 40px; height: 40px; border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                                    <i class="bi bi-${eventIcon} text-white"></i>
                                </div>
                            </div>
                            <div class="timeline-content flex-grow-1">
                                <div class="d-flex justify-content-between align-items-start mb-1">
                                    <div>
                                        <strong>${event.eventTypeName}</strong>
                                        ${isAutomatic ? '<span class="badge bg-secondary ms-2">Авто</span>' : ''}
                                    </div>
                                    <small class="text-muted">${time}</small>
                                </div>
                                <div class="text-muted mb-1">
                                    <strong>${event.detailName || 'Неизвестная деталь'}</strong> - ${event.stageName || 'Неизвестный этап'}
                                </div>
                                <div class="small text-muted">
                                    ${event.operatorName || 'Система'} • ${event.comment || 'Без комментария'}
                                </div>
                                ${event.machineName ? `<div class="small text-info"><i class="bi bi-tools"></i> ${event.machineName}</div>` : ''}
                            </div>
                        </div>
                    `;
        }

        // Иконки для типов событий
        function getEventIcon(eventType) {
            const icons = {
                'Started': 'play-fill',
                'Completed': 'check-circle-fill',
                'Paused': 'pause-fill',
                'Resumed': 'play-fill',
                'Assigned': 'arrow-right-circle',
                'Created': 'plus-circle',
                'Cancelled': 'x-circle',
                'Error': 'exclamation-triangle-fill'
            };
            return icons[eventType] || 'circle';
        }

        // Цвета для типов событий
        function getEventColor(eventType) {
            const colors = {
                'Started': 'primary',
                'Completed': 'success',
                'Paused': 'warning',
                'Resumed': 'info',
                'Assigned': 'secondary',
                'Created': 'info',
                'Cancelled': 'danger',
                'Error': 'danger'
            };
            return colors[eventType] || 'secondary';
        }

        // Показ деталей события
        function showEventDetail(eventId) {
            $.get(`/api/logs/stage-events/${eventId}`)
                .done(function (event) {
                    const content = `
                                <div class="row">
                                    <div class="col-md-6">
                                        <h6>Основная информация</h6>
                                        <table class="table table-sm">
                                            <tr><td>Тип события:</td><td><span class="badge bg-${getEventColor(event.eventType)}">${event.eventTypeName}</span></td></tr>
                                            <tr><td>Время:</td><td>${new Date(event.eventTime).toLocaleString('ru-RU')}</td></tr>
                                            <tr><td>Автоматическое:</td><td>${event.isAutomatic ? 'Да' : 'Нет'}</td></tr>
                                            <tr><td>Оператор:</td><td>${event.operatorName || 'Система'}</td></tr>
                                            <tr><td>Устройство:</td><td>${event.deviceId || '-'}</td></tr>
                                        </table>
                                    </div>
                                    <div class="col-md-6">
                                        <h6>Контекст</h6>
                                        <table class="table table-sm">
                                            <tr><td>Деталь:</td><td>${event.detailName || '-'}</td></tr>
                                            <tr><td>Этап:</td><td>${event.stageName || '-'}</td></tr>
                                            <tr><td>Станок:</td><td>${event.machineName || 'Не назначен'}</td></tr>
                                            <tr><td>Предыдущий статус:</td><td>${event.previousStatus || '-'}</td></tr>
                                            <tr><td>Новый статус:</td><td>${event.newStatus || '-'}</td></tr>
                                        </table>
                                    </div>
                                </div>
                                ${event.comment ? `
                                    <div class="row mt-3">
                                        <div class="col-12">
                                            <h6>Комментарий</h6>
                                            <div class="alert alert-light">${event.comment}</div>
                                        </div>
                                    </div>
                                ` : ''}
                                ${event.durationInPreviousState ? `
                                    <div class="row mt-3">
                                        <div class="col-12">
                                            <h6>Время в предыдущем состоянии</h6>
                                            <div class="alert alert-info">${formatDuration(event.durationInPreviousState)}</div>
                                        </div>
                                    </div>
                                ` : ''}
                            `;

                    $('#eventDetailContent').html(content);
                    $('#eventDetailModal').modal('show');
                })
                .fail(function () {
                    showNotification('Ошибка при загрузке деталей события', 'error');
                });
        }

        // Форматирование длительности
        function formatDuration(duration) {
            // duration приходит в формате "HH:MM:SS" или TimeSpan
            if (typeof duration === 'string') {
                return duration;
            }
            // Можно добавить более сложную логику форматирования
            return duration.toString();
        }

        // Применение фильтров
        function applyFilters() {
            loadLogs();
        }

        // Обновление логов
        function refreshLogs() {
            loadLogs();
            showNotification('Логи обновлены', 'success');
        }

        // Переключение автообновления
        function toggleAutoRefresh() {
            if (isAutoRefresh) {
                clearInterval(autoRefreshInterval);
                isAutoRefresh = false;
                $('#autoRefreshBtn')
                    .removeClass('btn-success')
                    .addClass('btn-outline-success')
                    .html('<i class="bi bi-play"></i> Автообновление');
            } else {
                autoRefreshInterval = setInterval(loadLogs, 10000); // каждые 10 секунд
                isAutoRefresh = true;
                $('#autoRefreshBtn')
                    .removeClass('btn-outline-success')
                    .addClass('btn-success')
                    .html('<i class="bi bi-pause"></i> Остановить');
            }
        }

        // Очистка старых логов
        function clearOldLogs() {
            if (!confirm('Удалить события старше 7 дней? Это действие нельзя отменить.')) {
                return;
            }

            $.post('/api/logs/cleanup', { daysOld: 7 })
                .done(function (response) {
                    showNotification(`Удалено ${response.deletedCount} старых событий`, 'success');
                    loadLogs();
                })
                .fail(function () {
                    showNotification('Ошибка при очистке логов', 'error');
                });
        }

        // Показ уведомлений
        function showNotification(message, type) {
            const alertClass = type === 'success' ? 'alert-success' :
                type === 'error' ? 'alert-danger' : 'alert-info';

            const notification = $(`
                        <div class="alert ${alertClass} alert-dismissible fade show position-fixed"
                             style="top: 20px; right: 20px; z-index: 9999; min-width: 300px;">
                            ${message}
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    `);

            $('body').append(notification);

            setTimeout(() => {
                notification.alert('close');
            }, 4000);
        }
    </script>
}

<style>
    .timeline-item:hover {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 10px;
        margin: -10px;
        margin-bottom: 2px;
    }

    .timeline-icon {
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .timeline-day {
        position: relative;
    }

        .timeline-day:not(:last-child)::after {
            content: '';
            position: absolute;
            left: 20px;
            top: 100%;
            width: 2px;
            height: 20px;
            background: #dee2e6;
        }
</style>