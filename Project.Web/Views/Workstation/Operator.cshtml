@model WorkstationViewModel
@{
    ViewData["Title"] = "Рабочая станция: " + Model.MachineName;
}

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h2>@Model.MachineName <small class="text-muted">@Model.InventoryNumber</small></h2>
            <p class="lead">Тип: @Model.MachineTypeName</p>
        </div>
        <div class="col-auto">
            <a href="@Url.Action("Index", "Workstation")" class="btn btn-outline-primary">
                <i class="bi bi-arrow-left"></i> К списку станков
            </a>
        </div>
    </div>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger mb-3">
            @TempData["ErrorMessage"]
        </div>
    }

    <div class="row">
        <div class="col-lg-8">
            <!-- Текущий этап -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Текущий этап</h5>
                    <div id="clock" class="fw-bold"></div>
                </div>
                <div class="card-body">
                    @if (Model.CurrentStage != null)
                    {
                        <div class="current-stage p-4 border rounded bg-light">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h3>@(Model.CurrentStage.IsSetup ? "Переналадка: " : "")@Model.CurrentStage.StageName</h3>
                                <span class="badge bg-primary fs-5 p-2">В работе</span>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <p><strong>Время начала:</strong> @Model.CurrentStage.StartTime?.ToString("dd.MM.yyyy HH:mm:ss")</p>
                                    <p><strong>Время в работе:</strong> <span id="elapsed-time">0:00:00</span></p>
                                </div>
                                <div class="col-md-6">
                                    <p><strong>ID этапа:</strong> #@Model.CurrentStage.Id</p>
                                    <p><strong>Тип:</strong> @(Model.CurrentStage.IsSetup ? "Переналадка" : "Операция")</p>
                                </div>
                            </div>
                            
                            <div class="progress mb-4" style="height: 25px;">
                                <div id="progress-bar" class="progress-bar progress-bar-striped progress-bar-animated" 
                                     role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                            </div>>

                            <div class="d-flex justify-content-between">
                                <form method="post" action="@Url.Action("PauseStage", "Workstation", new { id = Model.CurrentStage.Id })">
                                    <button type="submit" class="btn btn-warning btn-lg">
                                        <i class="bi bi-pause-fill"></i> Пауза
                                    </button>
                                </form>
                                
                                <button type="button" class="btn btn-outline-secondary btn-lg" data-bs-toggle="modal" data-bs-target="#notesModal">
                                    <i class="bi bi-card-text"></i> Добавить примечание
                                </button>
                                
                                <form method="post" action="@Url.Action("CompleteStage", "Workstation", new { id = Model.CurrentStage.Id })">
                                    <button type="submit" class="btn btn-success btn-lg">
                                        <i class="bi bi-check-lg"></i> Завершить
                                    </button>
                                </form>
                            </div>
                        </div>
                    }
                    else if (Model.NextStage != null)
                    {
                        <div class="next-stage p-4 border rounded bg-light">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h3>@(Model.NextStage.IsSetup ? "Переналадка: " : "")@Model.NextStage.StageName</h3>
                                <span class="badge bg-warning text-dark fs-5 p-2">Ожидает запуска</span>
                            </div>
                            <p class="mb-4">Этап готов к запуску. Нажмите кнопку "Начать", чтобы приступить к выполнению.</p>
                            
                            <div class="text-center">
                                <form method="post" action="@Url.Action("StartStage", "Workstation", new { id = Model.NextStage.Id })">
                                    <button type="submit" class="btn btn-primary btn-lg">
                                        <i class="bi bi-play-fill"></i> Начать
                                    </button>
                                </form>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="no-stage text-center p-5">
                            <i class="bi bi-tools" style="font-size: 3rem;"></i>
                            <h3 class="mt-3">Нет активных этапов</h3>
                            <p class="text-muted">В данный момент нет этапов, назначенных на этот станок.</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Очередь этапов -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Очередь этапов</h5>
                </div>
                <div class="card-body">
                    @if (Model.QueuedStages.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Этап</th>
                                        <th>Деталь</th>
                                        <th>Тип</th>
                                        <th>Статус</th>
                                        <th>Ожидаемое начало</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var stage in Model.QueuedStages)
                                    {
                                        <tr>
                                            <td>@stage.StageName</td>
                                            <td>@stage.DetailName</td>
                                            <td>@(stage.IsSetup ? "Переналадка" : "Операция")</td>
                                            <td><span class="badge bg-warning text-dark">В очереди</span></td>
                                            <td>@stage.ScheduledStartTime?.ToString("dd.MM.yyyy HH:mm")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-center text-muted my-4">Нет этапов в очереди</p>
                    }
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <!-- Статистика станка -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Статистика (за сегодня)</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-3">
                        <div class="text-center">
                            <h6>Работа</h6>
                            <h3 class="text-success">@Math.Round(Model.TotalWorkHours, 1) ч</h3>
                        </div>
                        <div class="text-center">
                            <h6>Переналадка</h6>
                            <h3 class="text-info">@Math.Round(Model.TotalSetupHours, 1) ч</h3>
                        </div>
                        <div class="text-center">
                            <h6>Простой</h6>
                            <h3 class="text-secondary">@Math.Round(Model.TotalIdleHours, 1) ч</h3>
                        </div>
                    </div>
                    
                    <div class="progress mb-2" style="height: 25px;">
                        <div class="progress-bar bg-success" style="width: @(Model.TotalWorkHours / (Model.TotalWorkHours + Model.TotalSetupHours + Model.TotalIdleHours) * 100)%">
                            Работа
                        </div>
                        <div class="progress-bar bg-info" style="width: @(Model.TotalSetupHours / (Model.TotalWorkHours + Model.TotalSetupHours + Model.TotalIdleHours) * 100)%">
                            Переналадка
                        </div>
                        <div class="progress-bar bg-secondary" style="width: @(Model.TotalIdleHours / (Model.TotalWorkHours + Model.TotalSetupHours + Model.TotalIdleHours) * 100)%">
                            Простой
                        </div>
                    </div>
                    
                    <p class="text-center mb-0">
                        Эффективность: <strong>@Model.EfficiencyPercentage%</strong>
                    </p>
                </div>
            </div>

            <!-- Недавние изменения статуса -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">История изменений</h5>
                </div>
                <div class="card-body">
                    @if (Model.RecentStatusChanges.Any())
                    {
                        <div class="status-timeline">
                            @foreach (var statusChange in Model.RecentStatusChanges)
                            {
                                <div class="status-item mb-3 pb-3 border-bottom">
                                    <div class="d-flex justify-content-between">
                                        <strong>@statusChange.ChangeTime.ToString("HH:mm")</strong>
                                        <span class="text-muted">@statusChange.ChangeTime.ToString("dd.MM.yyyy")</span>
                                    </div>
                                    <div>
                                        @statusChange.DetailName - @statusChange.StageName
                                    </div>
                                    <div>
                                        <span class="badge bg-secondary">@statusChange.FromStatus</span>
                                        <i class="bi bi-arrow-right"></i>
                                        <span class="badge bg-primary">@statusChange.ToStatus</span>
                                    </div>
                                    @if (!string.IsNullOrEmpty(statusChange.OperatorId))
                                    {
                                        <div class="text-muted small">
                                            Оператор: @statusChange.OperatorId
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(statusChange.Note))
                                    {
                                        <div class="text-muted small fst-italic mt-1">
                                            «@statusChange.Note»
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-center text-muted my-4">История изменений пуста</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно для добавления примечания -->
<div class="modal fade" id="notesModal" tabindex="-1" aria-labelledby="notesModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="notesModalLabel">Добавить примечание</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="post" action="@Url.Action("AddNote", "Workstation", new { id = Model.CurrentStage?.Id })">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="operatorId" class="form-label">ID оператора</label>
                        <input type="text" class="form-control" id="operatorId" name="operatorId">
                    </div>
                    <div class="mb-3">
                        <label for="note" class="form-label">Примечание</label>
                        <textarea class="form-control" id="note" name="note" rows="4"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                    <button type="submit" class="btn btn-primary">Сохранить</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Обновление часов
        function updateClock() {
            const now = new Date();
            document.getElementById('clock').textContent = now.toLocaleTimeString();
        }
        
        // Обновление времени выполнения текущего этапа
        function updateElapsedTime() {
            @if (Model.CurrentStage?.StartTime != null)
            {
                <text>
                const startTime = new Date('@Model.CurrentStage.StartTime?.ToString("yyyy-MM-ddTHH:mm:ss")');
                const now = new Date();
                const elapsedMs = now - startTime;
                
                const hours = Math.floor(elapsedMs / 3600000);
                const minutes = Math.floor((elapsedMs % 3600000) / 60000);
                const seconds = Math.floor((elapsedMs % 60000) / 1000);
                
                document.getElementById('elapsed-time').textContent = 
                    `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                
                // Обновление прогресс-бара (предполагаемая продолжительность - 1 час)
                const estimatedDuration = 3600000; // 1 час в миллисекундах
                const progressPercent = Math.min(100, Math.round((elapsedMs / estimatedDuration) * 100));
                
                const progressBar = document.getElementById('progress-bar');
                progressBar.style.width = `${progressPercent}%`;
                progressBar.setAttribute('aria-valuenow', progressPercent);
                progressBar.textContent = `${progressPercent}%`;
                
                // Изменение цвета прогресс-бара в зависимости от прогресса
                if (progressPercent < 50) {
                    progressBar.classList.remove('bg-warning', 'bg-danger');
                    progressBar.classList.add('bg-primary');
                } else if (progressPercent < 85) {
                    progressBar.classList.remove('bg-primary', 'bg-danger');
                    progressBar.classList.add('bg-warning');
                } else {
                    progressBar.classList.remove('bg-primary', 'bg-warning');
                    progressBar.classList.add('bg-danger');
                }
                </text>
            }
        }
        
        // Инициализация страницы
        $(document).ready(function() {
            // Обновление часов каждую секунду
            updateClock();
            setInterval(updateClock, 1000);
            
            // Обновление времени выполнения текущего этапа
            updateElapsedTime();
            setInterval(updateElapsedTime, 1000);
            
            // Автоматическое обновление страницы каждые 5 минут
            setTimeout(function() {
                location.reload();
            }, 300000); // 5 минут
        });
    </script>
}