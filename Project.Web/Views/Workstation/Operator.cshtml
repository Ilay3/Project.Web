@using Project.Web.ViewModels
@model OperatorWorkspaceViewModel
@{
    ViewData["Title"] = "Рабочее место: " + Model.MachineName;
}

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h2>@Model.MachineName <small class="text-muted">@Model.InventoryNumber</small></h2>
            <p class="lead">Тип: @Model.MachineTypeName</p>
        </div>
        <div class="col-auto">
            <a href="@Url.Action("Index", "OperatorWorkspace")" class="btn btn-outline-primary">
                <i class="bi bi-arrow-left"></i> К списку станков
            </a>
        </div>
    </div>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger mb-3">
            @TempData["ErrorMessage"]
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success mb-3">
            @TempData["SuccessMessage"]
        </div>
    }

    <div class="row">
        <div class="col-lg-8">
            <!-- Текущий этап -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Текущий этап</h5>
                    <div id="clock" class="fw-bold"></div>
                </div>
                <div class="card-body">
                    @if (Model.CurrentStage != null)
                    {
                        <div class="current-stage p-4 border rounded bg-light">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h3>@(Model.CurrentStage.IsSetup ? "Переналадка: " : "")@Model.CurrentStage.StageName</h3>
                                <span class="badge @Model.CurrentStage.StatusColorClass fs-5 p-2">@Model.CurrentStage.StatusDisplayName</span>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <p><strong>Деталь:</strong> @Model.CurrentStage.DetailName</p>
                                    <p><strong>Время начала:</strong> @Model.CurrentStage.StartTime?.ToString("dd.MM.yyyy HH:mm:ss")</p>
                                    <p><strong>Время в работе:</strong> <span id="elapsed-time">@Model.CurrentStage.ElapsedTimeFormatted</span></p>
                                </div>
                                <div class="col-md-6">
                                    <p><strong>ID этапа:</strong> #@Model.CurrentStage.Id</p>
                                    <p><strong>Тип:</strong> @(Model.CurrentStage.IsSetup ? "Переналадка" : "Операция")</p>
                                    @if (!string.IsNullOrEmpty(Model.CurrentStage.OperatorId))
                                    {
                                        <p><strong>Оператор:</strong> @Model.CurrentStage.OperatorId</p>
                                    }
                                </div>
                            </div>
                            
                            <div class="progress mb-4" style="height: 25px;">
                                <div id="progress-bar" class="progress-bar progress-bar-striped progress-bar-animated @Model.CurrentStage.StatusColorClass" 
                                     role="progressbar" style="width: @Model.CurrentStage.CompletionPercentage%" 
                                     aria-valuenow="@Model.CurrentStage.CompletionPercentage" aria-valuemin="0" aria-valuemax="100">
                                    @Math.Round(Model.CurrentStage.CompletionPercentage, 0)%
                                </div>
                            </div>

                            <div class="d-flex justify-content-between">
                                <form method="post" action="@Url.Action("PauseStage", "OperatorWorkspace")">
                                    <input type="hidden" name="id" value="@Model.CurrentStage.Id" />
                                    <input type="hidden" name="machineId" value="@Model.MachineId" />
                                    <input type="hidden" name="operatorId" value="@Model.OperatorId" />
                                    <button type="submit" class="btn btn-warning btn-lg">
                                        <i class="bi bi-pause-fill"></i> Пауза
                                    </button>
                                </form>
                                
                                <button type="button" class="btn btn-outline-secondary btn-lg" data-bs-toggle="modal" data-bs-target="#notesModal">
                                    <i class="bi bi-card-text"></i> Добавить примечание
                                </button>
                                
                                <form method="post" action="@Url.Action("CompleteStage", "OperatorWorkspace")">
                                    <input type="hidden" name="id" value="@Model.CurrentStage.Id" />
                                    <input type="hidden" name="machineId" value="@Model.MachineId" />
                                    <input type="hidden" name="operatorId" value="@Model.OperatorId" />
                                    <button type="submit" class="btn btn-success btn-lg">
                                        <i class="bi bi-check-lg"></i> Завершить
                                    </button>
                                </form>
                            </div>
                        </div>
                    }
                    else if (Model.NextStage != null)
                    {
                        <div class="next-stage p-4 border rounded bg-light">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h3>@(Model.NextStage.IsSetup ? "Переналадка: " : "")@Model.NextStage.StageName</h3>
                                <span class="badge @Model.NextStage.StatusColorClass fs-5 p-2">@Model.NextStage.StatusDisplayName</span>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <p><strong>Деталь:</strong> @Model.NextStage.DetailName</p>
                                    @if (Model.NextStage.ScheduledStartTime.HasValue)
                                    {
                                        <p><strong>Плановое начало:</strong> @Model.NextStage.ScheduledStartTime.Value.ToString("dd.MM.yyyy HH:mm")</p>
                                    }
                                </div>
                                <div class="col-md-6">
                                    <p><strong>ID этапа:</strong> #@Model.NextStage.Id</p>
                                    <p><strong>Тип:</strong> @(Model.NextStage.IsSetup ? "Переналадка" : "Операция")</p>
                                </div>
                            </div>
                            
                            <div class="text-center">
                                <form method="post" action="@Url.Action("StartStage", "OperatorWorkspace")">
                                    <input type="hidden" name="id" value="@Model.NextStage.Id" />
                                    <input type="hidden" name="machineId" value="@Model.MachineId" />
                                    <input type="hidden" name="operatorId" value="@Model.OperatorId" />
                                    <button type="submit" class="btn btn-primary btn-lg">
                                        <i class="bi bi-play-fill"></i> Начать
                                    </button>
                                </form>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="no-stage text-center p-5">
                            <i class="bi bi-tools" style="font-size: 3rem;"></i>
                            <h3 class="mt-3">Нет активных этапов</h3>
                            <p class="text-muted">В данный момент нет этапов, назначенных на этот станок.</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Очередь этапов -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Очередь этапов</h5>
                </div>
                <div class="card-body">
                    @if (Model.QueuedStages.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Этап</th>
                                        <th>Деталь</th>
                                        <th>Тип</th>
                                        <th>Статус</th>
                                        <th>Ожидаемое начало</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var stage in Model.QueuedStages)
                                    {
                                        <tr>
                                            <td>@stage.StageName</td>
                                            <td>@stage.DetailName</td>
                                            <td>@(stage.IsSetup ? "Переналадка" : "Операция")</td>
                                            <td><span class="badge @stage.StatusColorClass">@stage.StatusDisplayName</span></td>
                                            <td>
                                                @if (stage.ScheduledStartTime.HasValue)
                                                {
                                                    @stage.ScheduledStartTime.Value.ToString("dd.MM.yyyy HH:mm")
                                                }
                                                else
                                                {
                                                    <span>Не запланировано</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-center text-muted my-4">Нет этапов в очереди</p>
                    }
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <!-- Статистика станка -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Статистика (за сегодня)</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-3">
                        <div class="text-center">
                            <h6>Работа</h6>
                            <h3 class="text-success">@Math.Round(Model.TotalWorkHours, 1) ч</h3>
                        </div>
                        <div class="text-center">
                            <h6>Переналадка</h6>
                            <h3 class="text-info">@Math.Round(Model.TotalSetupHours, 1) ч</h3>
                        </div>
                        <div class="text-center">
                            <h6>Простой</h6>
                            <h3 class="text-secondary">@Math.Round(Model.TotalIdleHours, 1) ч</h3>
                        </div>
                    </div>
                    
                    <div class="progress mb-2" style="height: 25px;">
                        @{ 
                            var totalTime = Model.TotalWorkHours + Model.TotalSetupHours + Model.TotalIdleHours;
                            var workPercent = totalTime > 0 ? (Model.TotalWorkHours / totalTime) * 100 : 0;
                            var setupPercent = totalTime > 0 ? (Model.TotalSetupHours / totalTime) * 100 : 0; 
                            var idlePercent = totalTime > 0 ? (Model.TotalIdleHours / totalTime) * 100 : 0;
                        }
                        <div class="progress-bar bg-success" style="width: @workPercent%">
                            Работа
                        </div>
                        <div class="progress-bar bg-info" style="width: @setupPercent%">
                            Переналадка
                        </div>
                        <div class="progress-bar bg-secondary" style="width: @idlePercent%">
                            Простой
                        </div>
                    </div>
                    
                    <p class="text-center mb-0">
                        Эффективность: <strong>@Model.EfficiencyPercentage%</strong>
                    </p>
                </div>
            </div>

            <!-- Недавние изменения статуса -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">История изменений</h5>
                </div>
                <div class="card-body">
                    @if (Model.RecentStatusChanges.Any())
                    {
                        <div class="status-timeline">
                            @foreach (var statusChange in Model.RecentStatusChanges)
                            {
                                <div class="status-item mb-3 pb-3 border-bottom">
                                    <div class="d-flex justify-content-between">
                                        <strong>@statusChange.ChangeTime.ToString("HH:mm")</strong>
                                        <span class="text-muted">@statusChange.ChangeTime.ToString("dd.MM.yyyy")</span>
                                    </div>
                                    <div>
                                        @statusChange.DetailName - @statusChange.StageName
                                    </div>
                                    <div>
                                        <span class="badge bg-secondary">@statusChange.FromStatus</span>
                                        <i class="bi bi-arrow-right"></i>
                                        <span class="badge bg-primary">@statusChange.ToStatus</span>
                                    </div>
                                    @if (!string.IsNullOrEmpty(statusChange.OperatorId))
                                    {
                                        <div class="text-muted small">
                                            Оператор: @statusChange.OperatorId
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(statusChange.Note))
                                    {
                                        <div class="text-muted small fst-italic mt-1">
                                            «@statusChange.Note»
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-center text-muted my-4">История изменений пуста</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно для добавления примечания -->
<div class="modal fade" id="notesModal" tabindex="-1" aria-labelledby="notesModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="notesModalLabel">Добавить примечание</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="post" action="@Url.Action("AddNote", "OperatorWorkspace")">
                <div class="modal-body">
                    <input type="hidden" name="id" value="@Model.CurrentStage?.Id" />
                    <input type="hidden" name="machineId" value="@Model.MachineId" />
                    <div class="mb-3">
                        <label for="operatorId" class="form-label">ID оператора</label>
                        <input type="text" class="form-control" id="operatorId" name="operatorId" value="@Model.OperatorId">
                    </div>
                    <div class="mb-3">
                        <label for="note" class="form-label">Примечание</label>
                        <textarea class="form-control" id="note" name="note" rows="4"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                    <button type="submit" class="btn btn-primary">Сохранить</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Обновление часов
        function updateClock() {
            const now = new Date();
            document.getElementById('clock').textContent = now.toLocaleTimeString();
        }
        
        // Обновление времени выполнения текущего этапа
        function updateElapsedTime() {
            if (Model.CurrentStage?.StartTime != null)
            {
               
                const startTime = new Date('@Model.CurrentStage.StartTime?.ToString("yyyy-MM-ddTHH:mm:ss")');
                const now = new Date();
                const elapsedMs = now - startTime;
                
                const hours = Math.floor(elapsedMs / 3600000);
                const minutes = Math.floor((elapsedMs % 3600000) / 60000);
                const seconds = Math.floor((elapsedMs % 60000) / 1000);
                
                document.getElementById('elapsed-time').textContent = 
                    `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                
                // Обновление прогресс-бара
                const progressBar = document.getElementById('progress-bar');
                
                // Расчет прогресса в зависимости от планового времени
                const plannedDurationMs = @((Model.CurrentStage.PlannedDuration.TotalMilliseconds).ToString()) || 3600000;
                const progressPercent = Math.min(100, Math.round((elapsedMs / plannedDurationMs) * 100));
                
                progressBar.style.width = `${progressPercent}%`;
                progressBar.setAttribute('aria-valuenow', progressPercent);
                progressBar.textContent = `${progressPercent}%`;
                
                // Изменение цвета прогресс-бара в зависимости от прогресса
                if (progressPercent < 50) {
                    progressBar.classList.remove('bg-warning', 'bg-danger');
                    progressBar.classList.add('bg-primary');
                } else if (progressPercent < 85) {
                    progressBar.classList.remove('bg-primary', 'bg-danger');
                    progressBar.classList.add('bg-warning');
                } else {
                    progressBar.classList.remove('bg-primary', 'bg-warning');
                    progressBar.classList.add('bg-danger');
                }
               
            }
        }
        
        // Периодическое обновление данных со страницы
        function refreshWorkspaceData() {
            if (!@Model.EnableAutoRefresh.ToString().ToLower()) return;
            
            // Запрос новых данных с сервера
            fetch('@Url.Action("GetWorkspaceData", "OperatorWorkspace", new { machineId = Model.MachineId })')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Ошибка при получении данных');
                    }
                    return response.json();
                })
                .then(data => {
                    // Проверяем, изменился ли текущий этап или его статус
                    if (data.currentStage && '@(Model.CurrentStage?.Id ?? 0)' != data.currentStage.id) {
                        // Если этап изменился, перезагружаем страницу
                        location.reload();
                    }
                    else if (data.currentStage && '@(Model.CurrentStage?.Status ?? "None")' != data.currentStage.status) {
                        // Если статус этапа изменился, перезагружаем страницу
                        location.reload();
                    }
                    else if (!data.currentStage && '@(Model.CurrentStage?.Id ?? 0)' != '0') {
                        // Если этап был завершен, перезагружаем страницу
                        location.reload();
                    }
                    else if (data.nextStage && !@(Model.CurrentStage != null).ToString().ToLower()) {
                        // Если появился следующий этап, а текущего не было
                        location.reload();
                    }
                    
                    // Проверяем изменения в очереди
                    if (data.queuedStages.length != @Model.QueuedStages.Count) {
                        location.reload();
                    }
                    
                    // Если нужно обновить уведомления
                    if (@Model.PlaySoundNotifications.ToString().ToLower()) {
                        // Проверяем наличие изменений, требующих звукового уведомления
                        // Например, если появился новый этап в очереди
                    }
                })
                .catch(error => {
                    console.error('Ошибка при обновлении данных:', error);
                });
        }
        
        // Инициализация страницы
        $(document).ready(function() {
            // Обновление часов каждую секунду
            updateClock();
            setInterval(updateClock, 1000);
            
            // Обновление времени выполнения текущего этапа
            updateElapsedTime();
            setInterval(updateElapsedTime, 1000);
            
            // Периодическое обновление данных
            setInterval(refreshWorkspaceData, @(Model.RefreshIntervalSeconds * 1000));
            
            // Автоматическое обновление страницы каждые 5 минут (на всякий случай)
            setTimeout(function() {
                location.reload();
            }, 300000); // 5 минут
        });
    </script>
}