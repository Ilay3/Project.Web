@using Project.Contracts.Enums
@model PlanningIndexViewModel
@{
    ViewData["Title"] = "Планирование производства";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h3">
        <i class="bi bi-calendar-plus"></i> Планирование производства
    </h1>
    <div>
        <button class="btn btn-primary" onclick="optimizeSchedule()">
            <i class="bi bi-lightning"></i> Оптимизировать
        </button>
        <button class="btn btn-warning" onclick="resolveConflicts()">
            <i class="bi bi-exclamation-triangle"></i> Разрешить конфликты
        </button>
    </div>
</div>

<!-- Обзор планирования -->
<div class="row mb-4">
    <div class="col-md-2">
        <div class="card text-center">
            <div class="card-body">
                <h5 class="card-title">В очереди</h5>
                <h3 class="text-warning">@Model.Overview.TotalStagesInQueue</h3>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card text-center">
            <div class="card-body">
                <h5 class="card-title">В работе</h5>
                <h3 class="text-primary">@Model.Overview.StagesInProgress</h3>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card text-center">
            <div class="card-body">
                <h5 class="card-title">Ожидают</h5>
                <h3 class="text-secondary">@Model.Overview.PendingStages</h3>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card text-center">
            <div class="card-body">
                <h5 class="card-title">Просрочено</h5>
                <h3 class="text-danger">@Model.Overview.OverdueStages</h3>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card text-center">
            <div class="card-body">
                <h5 class="card-title">Эффективность</h5>
                <h3 class="text-success">@Model.Overview.EfficiencyPercentage%</h3>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card text-center">
            <div class="card-body">
                <h5 class="card-title">Конфликты</h5>
                <h3 class="@(Model.Overview.ConflictsCount > 0 ? "text-danger" : "text-success")">
                    @Model.Overview.ConflictsCount
                </h3>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <!-- Левая колонка -->
    <div class="col-lg-8">
        <!-- Незапланированные партии -->
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Незапланированные партии</h5>
                <button class="btn btn-sm btn-success" onclick="bulkSchedule()">
                    <i class="bi bi-calendar-plus"></i> Запланировать все
                </button>
            </div>
            <div class="card-body">
                @if (Model.UnscheduledBatches.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>
                                        <input type="checkbox" id="selectAll" onchange="toggleAll(this)">
                                    </th>
                                    <th>Деталь</th>
                                    <th>Количество</th>
                                    <th>Приоритет</th>
                                    <th>Создана</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var batch in Model.UnscheduledBatches)
                                {
                                    <tr>
                                        <td>
                                            <input type="checkbox" class="batch-select" value="@batch.Id">
                                        </td>
                                        <td>
                                            <strong>@batch.DetailName</strong><br>
                                            <small class="text-muted">@batch.DetailNumber</small>
                                        </td>
                                        <td>@batch.Quantity шт</td>
                                        <td>
                                            <span class="badge bg-@(batch.Priority == Priority.Critical ? "danger" :
                                                                   batch.Priority == Priority.High ? "warning" :
                                                                   batch.Priority == Priority.Low ? "secondary" : "primary")">
                                                @batch.Priority
                                            </span>
                                        </td>
                                        <td>@batch.CreatedUtc.ToString("dd.MM.yyyy")</td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-primary" onclick="scheduleBatch(@batch.Id)">
                                                <i class="bi bi-calendar-plus"></i> Планировать
                                            </button>
                                            <button class="btn btn-sm btn-outline-secondary" onclick="getForecast(@batch.Id)">
                                                <i class="bi bi-graph-up"></i> Прогноз
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-3">
                        <i class="bi bi-check-circle display-1 text-success"></i>
                        <p>Все партии запланированы</p>
                    </div>
                }
            </div>
        </div>

        <!-- Критические этапы -->
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Критические этапы</h5>
            </div>
            <div class="card-body">
                @if (Model.CriticalStages.Any())
                {
                    @foreach (var stage in Model.CriticalStages)
                    {
                        <div class="d-flex align-items-center justify-content-between mb-2 p-2 border rounded @(stage.IsOverdue ? "border-danger bg-light" : "")">
                            <div>
                                <strong>@stage.DetailName</strong> - @stage.StageName
                                <br>
                                <small class="text-muted">
                                    @stage.MachineName • Ожидает: @stage.WaitingTime.ToString(@"hh\:mm")
                                    @if (stage.IsOverdue)
                                    {
                                        <span class="text-danger">• ПРОСРОЧЕНО</span>
                                    }
                                </small>
                            </div>
                            <div>
                                <span class="badge bg-@(stage.Priority == Priority.Critical ? "danger" : "warning")">
                                    @stage.Priority
                                </span>
                                <button class="btn btn-sm btn-outline-primary ms-2" onclick="prioritizeStage(@stage.Id)">
                                    <i class="bi bi-arrow-up"></i> Приоритет
                                </button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-3">
                        <i class="bi bi-check-circle display-1 text-success"></i>
                        <p>Нет критических этапов</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Правая колонка -->
    <div class="col-lg-4">
        <!-- Прогноз для детали -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">Прогноз изготовления</h5>
            </div>
            <div class="card-body">
                <form id="forecastForm">
                    <div class="mb-3">
                        <label class="form-label">Деталь</label>
                        <select class="form-select" name="detailId" required>
                            <option value="">Выберите деталь...</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Количество</label>
                        <input type="number" class="form-control" name="quantity" min="1" value="1" required>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="bi bi-graph-up"></i> Получить прогноз
                    </button>
                </form>

                <div id="forecastResult" style="display: none;" class="mt-3">
                    <hr>
                    <h6>Результат прогноза:</h6>
                    <div class="row text-center">
                        <div class="col-6">
                            <div class="text-muted">Начало</div>
                            <div class="fw-bold" id="forecastStart">—</div>
                        </div>
                        <div class="col-6">
                            <div class="text-muted">Завершение</div>
                            <div class="fw-bold" id="forecastEnd">—</div>
                        </div>
                    </div>
                    <div class="mt-2">
                        <div class="text-muted">Общая длительность</div>
                        <div class="fw-bold" id="forecastDuration">—</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Быстрые действия -->
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Быстрые действия</h5>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    <button class="btn btn-outline-primary" onclick="viewGantt()">
                        <i class="bi bi-bar-chart-steps"></i> Диаграмма Ганта
                    </button>
                    <button class="btn btn-outline-primary" onclick="viewQueue()">
                        <i class="bi bi-list-ol"></i> Просмотр очереди
                    </button>
                    <button class="btn btn-outline-primary" onclick="viewMachineLoad()">
                        <i class="bi bi-gear-wide-connected"></i> Загрузка станков
                    </button>
                    <button class="btn btn-outline-primary" onclick="exportPlan()">
                        <i class="bi bi-download"></i> Экспорт плана
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function toggleAll(checkbox) {
            const checkboxes = document.querySelectorAll('.batch-select');
            checkboxes.forEach(cb => cb.checked = checkbox.checked);
        }

        function scheduleBatch(batchId) {
            if (confirm('Запустить планирование для этой партии?')) {
                fetch('@Url.Action("AutoSchedule")', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ batchId: batchId })
                }).then(response => {
                    if (response.ok) {
                        alert('Планирование запущено');
                        location.reload();
                    }
                });
            }
        }

        function bulkSchedule() {
            const selected = Array.from(document.querySelectorAll('.batch-select:checked')).map(cb => parseInt(cb.value));
            if (selected.length === 0) {
                alert('Выберите партии для планирования');
                return;
            }

            if (confirm(`Запланировать ${selected.length} партий?`)) {
                fetch('@Url.Action("BulkSchedule")', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ batchIds: selected })
                }).then(response => {
                    if (response.ok) {
                        alert('Планирование запущено');
                        location.reload();
                    }
                });
            }
        }

        function getForecast(batchId) {
            // Здесь можно загрузить данные партии и показать прогноз
            alert('Функция прогноза для партии в разработке');
        }

        function prioritizeStage(stageId) {
            if (confirm('Повысить приоритет этапа?')) {
                fetch('@Url.Action("ChangePriority")', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ stageId: stageId, priority: 'High' })
                }).then(response => {
                    if (response.ok) {
                        alert('Приоритет изменен');
                        location.reload();
                    }
                });
            }
        }

        function optimizeSchedule() {
            if (confirm('Запустить оптимизацию планирования?')) {
                fetch('@Url.Action("OptimizeSchedule")', {
                    method: 'POST'
                }).then(response => {
                    if (response.ok) {
                        alert('Оптимизация запущена');
                        location.reload();
                    }
                });
            }
        }

        function resolveConflicts() {
            if (confirm('Автоматически разрешить конфликты в расписании?')) {
                fetch('@Url.Action("ResolveConflicts")', {
                    method: 'POST'
                }).then(response => {
                    if (response.ok) {
                        alert('Конфликты разрешены');
                        location.reload();
                    }
                });
            }
        }

        function viewGantt() {
            window.open('@Url.Action("Index", "Gantt")', '_blank');
        }

        function viewQueue() {
            window.open('@Url.Action("Queue")', '_blank');
        }

        function viewMachineLoad() {
            window.open('@Url.Action("Index", "Machines")', '_blank');
        }

        function exportPlan() {
            window.open('@Url.Action("ExportPlan")', '_blank');
        }

        // Форма прогноза
        document.getElementById('forecastForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);

            fetch('@Url.Action("GetForecast")', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('forecastStart').textContent =
                        new Date(data.forecast.earliestStartTime).toLocaleString();
                    document.getElementById('forecastEnd').textContent =
                        new Date(data.forecast.latestEndTime).toLocaleString();
                    document.getElementById('forecastDuration').textContent =
                        `${data.forecast.totalDuration} часов`;
                    document.getElementById('forecastResult').style.display = 'block';
                }
            });
        });

        // Загрузка деталей при загрузке страницы
        window.addEventListener('load', function() {
            fetch('@Url.Action("GetDetailsForBatch", "Details")')
                .then(response => response.json())
                .then(data => {
                    const select = document.querySelector('#forecastForm select[name="detailId"]');
                    data.forEach(detail => {
                        const option = document.createElement('option');
                        option.value = detail.id;
                        option.textContent = detail.text;
                        select.appendChild(option);
                    });
                });
        });

        // Автообновление каждые 30 секунд
        setInterval(() => {
            if (!document.hidden) {
                location.reload();
            }
        }, 30000);
    </script>
}