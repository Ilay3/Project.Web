@model BatchDetailsViewModel
@{
    ViewData["Title"] = "Детали партии №" + Model.Id;
}

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h2>Партия №@Model.Id</h2>
            <p class="lead">Деталь: @Model.DetailName</p>
        </div>
        <div class="col-auto">
            <div class="btn-group" role="group">
                <a href="@Url.Action("Index", "Batch")" class="btn btn-outline-primary">
                    <i class="bi bi-arrow-left"></i> К списку партий
                </a>
                <button type="button" class="btn btn-success" onclick="autoRefreshData()" id="autoRefreshBtn">
                    <i class="bi bi-arrow-clockwise"></i> Автообновление
                </button>
                <a href="@Url.Action("Index", "Gantt")" class="btn btn-outline-primary">
                    <i class="bi bi-calendar3"></i> Диаграмма Ганта
                </a>
            </div>
        </div>
    </div>

    <!-- Статус и прогресс партии -->
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Прогресс выполнения</h5>
                </div>
                <div class="card-body">
                    <div class="row text-center mb-3">
                        <div class="col">
                            <h3 class="text-success" id="completed-stages">@Model.CompletedStages</h3>
                            <small class="text-muted">Завершено</small>
                        </div>
                        <div class="col">
                            <h3 class="text-primary" id="progress-stages">@Model.InProgressStages</h3>
                            <small class="text-muted">В работе</small>
                        </div>
                        <div class="col">
                            <h3 class="text-warning" id="pending-stages">@Model.PendingStages</h3>
                            <small class="text-muted">Ожидает</small>
                        </div>
                        <div class="col">
                            <h3 class="text-info" id="total-stages">@Model.TotalStages</h3>
                            <small class="text-muted">Всего</small>
                        </div>
                    </div>
                    <div class="progress mb-3" style="height: 25px;">
                        <div class="progress-bar bg-success" id="progress-completed"
                             style="width: @(Model.CompletedStages * 100.0 / Math.Max(1, Model.TotalStages))%;">
                            @Model.CompletedStages
                        </div>
                        <div class="progress-bar bg-primary" id="progress-active"
                             style="width: @(Model.InProgressStages * 100.0 / Math.Max(1, Model.TotalStages))%;">
                            @Model.InProgressStages
                        </div>
                    </div>
                    <p class="text-center mb-0">
                        <strong id="completion-percent">@Model.CompletionPercent%</strong> выполнено
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Быстрые действия</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button type="button" class="btn btn-success" onclick="startAllReadyStages()">
                            <i class="bi bi-play-fill"></i> Запустить готовые этапы
                        </button>
                        <button type="button" class="btn btn-warning" onclick="pauseAllActiveStages()">
                            <i class="bi bi-pause-fill"></i> Приостановить все
                        </button>
                        <button type="button" class="btn btn-info" onclick="showBatchStatistics()">
                            <i class="bi bi-graph-up"></i> Статистика
                        </button>
                        <button type="button" class="btn btn-secondary" onclick="exportBatchReport()">
                            <i class="bi bi-file-earmark-excel"></i> Экспорт отчета
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Таблица этапов с управлением -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Этапы выполнения</h5>
                    <div class="btn-group btn-group-sm">
                        <button type="button" class="btn btn-outline-primary" onclick="refreshStagesData()">
                            <i class="bi bi-arrow-clockwise"></i> Обновить
                        </button>
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                <i class="bi bi-funnel"></i> Фильтр
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="#" onclick="filterStages('all')">Все этапы</a></li>
                                <li><a class="dropdown-item" href="#" onclick="filterStages('InProgress')">В работе</a></li>
                                <li><a class="dropdown-item" href="#" onclick="filterStages('Pending')">Ожидают</a></li>
                                <li><a class="dropdown-item" href="#" onclick="filterStages('Completed')">Завершенные</a></li>
                                <li><a class="dropdown-item" href="#" onclick="filterStages('setup')">Переналадки</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0" id="stages-table">
                            <thead class="table-light">
                                <tr>
                                    <th width="5%">ID</th>
                                    <th width="15%">Подпартия</th>
                                    <th width="20%">Этап</th>
                                    <th width="15%">Станок</th>
                                    <th width="10%">Статус</th>
                                    <th width="15%">Время</th>
                                    <th width="10%">Длительность</th>
                                    <th width="10%">Действия</th>
                                </tr>
                            </thead>
                            <tbody id="stages-tbody">
                                <!-- Этапы будут загружены через AJAX -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно детальной информации об этапе -->
<div class="modal fade" id="stageDetailModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Детали этапа</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="stageDetailContent">
                <!-- Содержимое загружается через AJAX -->
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно подтверждения действий -->
<div class="modal fade" id="confirmActionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmActionTitle">Подтверждение</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p id="confirmActionMessage"></p>
                <div class="mb-3" id="reasonContainer" style="display: none;">
                    <label for="reasonNote" class="form-label">Причина:</label>
                    <textarea class="form-control" id="reasonNote" rows="3"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" id="confirmActionBtn">Выполнить</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let autoRefreshInterval;
        let isAutoRefresh = false;

        $(document).ready(function () {
            loadStagesData();

            // Обновляем данные каждые 10 секунд если включено автообновление
            $('#autoRefreshBtn').click(function () {
                toggleAutoRefresh();
            });
        });

        // Загрузка данных этапов
        function loadStagesData() {
            $.get('/api/batches/@Model.Id/stages-detailed')
                .done(function (stages) {
                    renderStagesTable(stages);
                    updateStatistics(stages);
                })
                .fail(function () {
                    showNotification('Ошибка при загрузке данных этапов', 'error');
                });
        }

        // Отображение таблицы этапов
        function renderStagesTable(stages) {
            const tbody = $('#stages-tbody');
            tbody.empty();

            stages.forEach(function (stage) {
                const row = createStageRow(stage);
                tbody.append(row);
            });
        }

        // Создание строки этапа
        function createStageRow(stage) {
            const statusBadge = getStatusBadge(stage.status);
            const timeInfo = getTimeInfo(stage);
            const durationInfo = getDurationInfo(stage);
            const actionButtons = getActionButtons(stage);

            return $(`
                        <tr data-stage-id="${stage.id}" data-status="${stage.status}" class="${stage.isSetup ? 'table-warning' : ''}">
                            <td>${stage.id}</td>
                            <td>
                                <small class="text-muted">Подпартия #${stage.subBatchId}</small><br>
                                <small>(${stage.subBatchQuantity} шт.)</small>
                            </td>
                            <td>
                                <strong>${stage.stageName}</strong>
                                ${stage.isSetup ? '<br><small class="text-warning"><i class="bi bi-tools"></i> Переналадка</small>' : ''}
                                ${stage.isOverdue ? '<br><small class="text-danger"><i class="bi bi-exclamation-triangle"></i> Просрочен</small>' : ''}
                            </td>
                            <td>
                                ${stage.machineName || '<span class="text-muted">Не назначен</span>'}
                                ${stage.machineId ? `<br><small class="text-muted">#${stage.machineId}</small>` : ''}
                            </td>
                            <td>${statusBadge}</td>
                            <td><small>${timeInfo}</small></td>
                            <td><small>${durationInfo}</small></td>
                            <td>${actionButtons}</td>
                        </tr>
                    `);
        }

        // Получение HTML статуса
        function getStatusBadge(status) {
            const badges = {
                'Pending': '<span class="badge bg-light text-dark">Ожидает</span>',
                'Waiting': '<span class="badge bg-warning text-dark">В очереди</span>',
                'InProgress': '<span class="badge bg-primary">В работе</span>',
                'Paused': '<span class="badge bg-secondary">На паузе</span>',
                'Completed': '<span class="badge bg-success">Завершено</span>',
                'Error': '<span class="badge bg-danger">Ошибка</span>'
            };
            return badges[status] || `<span class="badge bg-light">${status}</span>`;
        }

        // Получение информации о времени
        function getTimeInfo(stage) {
            let info = '';
            if (stage.startTime) {
                info += `Начат: ${formatDateTime(stage.startTime)}<br>`;
            }
            if (stage.endTime) {
                info += `Завершен: ${formatDateTime(stage.endTime)}`;
            } else if (stage.pauseTime) {
                info += `Приостановлен: ${formatDateTime(stage.pauseTime)}`;
            }
            return info || 'Не начат';
        }

        // Получение информации о длительности
        function getDurationInfo(stage) {
            let info = '';
            if (stage.durationFormatted) {
                info += `Факт: ${stage.durationFormatted}<br>`;
            }
            if (stage.plannedDurationFormatted) {
                info += `План: ${stage.plannedDurationFormatted}`;
            }
            return info || '-';
        }

        // Получение кнопок действий
        function getActionButtons(stage) {
            const buttons = [];

            // Информация
            buttons.push(`<button class="btn btn-sm btn-outline-info" onclick="showStageDetail(${stage.id})" title="Подробнее">
                        <i class="bi bi-info-circle"></i>
                    </button>`);

            // Действия в зависимости от статуса
            switch (stage.status) {
                case 'Pending':
                    if (stage.machineId) {
                        buttons.push(`<button class="btn btn-sm btn-success" onclick="performStageAction(${stage.id}, 'start')" title="Запустить">
                                    <i class="bi bi-play-fill"></i>
                                </button>`);
                    } else {
                        buttons.push(`<button class="btn btn-sm btn-warning" onclick="assignMachine(${stage.id})" title="Назначить станок">
                                    <i class="bi bi-tools"></i>
                                </button>`);
                    }
                    buttons.push(`<button class="btn btn-sm btn-danger" onclick="performStageAction(${stage.id}, 'cancel')" title="Отменить">
                                <i class="bi bi-x-circle"></i>
                            </button>`);
                    break;

                case 'InProgress':
                    buttons.push(`<button class="btn btn-sm btn-warning" onclick="performStageAction(${stage.id}, 'pause')" title="Приостановить">
                                <i class="bi bi-pause-fill"></i>
                            </button>`);
                    buttons.push(`<button class="btn btn-sm btn-success" onclick="performStageAction(${stage.id}, 'complete')" title="Завершить">
                                <i class="bi bi-check-circle"></i>
                            </button>`);
                    break;

                case 'Paused':
                    buttons.push(`<button class="btn btn-sm btn-primary" onclick="performStageAction(${stage.id}, 'resume')" title="Возобновить">
                                <i class="bi bi-play-fill"></i>
                            </button>`);
                    buttons.push(`<button class="btn btn-sm btn-success" onclick="performStageAction(${stage.id}, 'complete')" title="Завершить">
                                <i class="bi bi-check-circle"></i>
                            </button>`);
                    break;

                case 'Waiting':
                    buttons.push(`<button class="btn btn-sm btn-warning" onclick="assignMachine(${stage.id})" title="Переназначить">
                                <i class="bi bi-arrow-repeat"></i>
                            </button>`);
                    break;
            }

            return `<div class="btn-group btn-group-sm">${buttons.join('')}</div>`;
        }

        // Выполнение действия над этапом
        function performStageAction(stageId, action) {
            const actionNames = {
                'start': 'запустить',
                'pause': 'приостановить',
                'resume': 'возобновить',
                'complete': 'завершить',
                'cancel': 'отменить'
            };

            const needsReason = ['pause', 'cancel'];

            $('#confirmActionTitle').text(`Подтверждение действия`);
            $('#confirmActionMessage').text(`Вы уверены, что хотите ${actionNames[action]} этап #${stageId}?`);

            if (needsReason.includes(action)) {
                $('#reasonContainer').show();
                $('#reasonNote').attr('required', true);
            } else {
                $('#reasonContainer').hide();
                $('#reasonNote').removeAttr('required');
            }

            $('#confirmActionBtn').off('click').on('click', function () {
                const reasonNote = $('#reasonNote').val();
                executeStageAction(stageId, action, reasonNote);
                $('#confirmActionModal').modal('hide');
            });

            $('#confirmActionModal').modal('show');
        }

        // Выполнение действия
        function executeStageAction(stageId, action, reasonNote = '') {
            const data = {
                operatorId: 'WEB_USER',
                reasonNote: reasonNote || `${action} через веб-интерфейс`,
                deviceId: 'WEB'
            };

            $.ajax({
                url: `/api/stages/${stageId}/${action}`,
                method: 'POST',
                data: JSON.stringify(data),
                contentType: 'application/json',
                success: function (response) {
                    if (response.success) {
                        showNotification(response.message, 'success');
                        loadStagesData(); // Перезагружаем данные
                    } else {
                        showNotification(response.message, 'error');
                    }
                },
                error: function (xhr) {
                    const response = xhr.responseJSON;
                    showNotification(response?.message || 'Ошибка при выполнении действия', 'error');
                }
            });
        }

        // Показ детальной информации об этапе
        function showStageDetail(stageId) {
            $.get(`/api/stages/${stageId}`)
                .done(function (stage) {
                    const content = `
                                <div class="row">
                                    <div class="col-md-6">
                                        <h6>Основная информация</h6>
                                        <table class="table table-sm">
                                            <tr><td>ID этапа:</td><td>${stage.id}</td></tr>
                                            <tr><td>Деталь:</td><td>${stage.detailName}</td></tr>
                                            <tr><td>Этап:</td><td>${stage.stageName}</td></tr>
                                            <tr><td>Станок:</td><td>${stage.machineName || 'Не назначен'}</td></tr>
                                            <tr><td>Статус:</td><td>${getStatusBadge(stage.status)}</td></tr>
                                            <tr><td>Tип:</td><td>${stage.isSetup ? 'Переналадка' : 'Операция'}</td></tr>
                                        </table>
                                    </div>
                                    <div class="col-md-6">
                                        <h6>Временные показатели</h6>
                                        <table class="table table-sm">
                                            <tr><td>Время начала:</td><td>${stage.startTime ? formatDateTime(stage.startTime) : 'Не начат'}</td></tr>
                                            <tr><td>Время завершения:</td><td>${stage.endTime ? formatDateTime(stage.endTime) : 'Не завершен'}</td></tr>
                                            <tr><td>Фактическая длительность:</td><td>${stage.durationFormatted || '-'}</td></tr>
                                            <tr><td>Плановая длительность:</td><td>${stage.plannedDurationFormatted}</td></tr>
                                            <tr><td>Просрочен:</td><td>${stage.isOverdue ? '<span class="text-danger">Да</span>' : '<span class="text-success">Нет</span>'}</td></tr>
                                        </table>
                                    </div>
                                </div>
                                ${stage.reasonNote ? `<div class="mt-3"><h6>Примечание</h6><p class="text-muted">${stage.reasonNote}</p></div>` : ''}
                            `;

                    $('#stageDetailContent').html(content);
                    $('#stageDetailModal').modal('show');
                })
                .fail(function () {
                    showNotification('Ошибка при загрузке информации об этапе', 'error');
                });
        }

        // Переключение автообновления
        function toggleAutoRefresh() {
            if (isAutoRefresh) {
                clearInterval(autoRefreshInterval);
                isAutoRefresh = false;
                $('#autoRefreshBtn').removeClass('btn-success').addClass('btn-outline-secondary')
                    .html('<i class="bi bi-arrow-clockwise"></i> Автообновление');
            } else {
                autoRefreshInterval = setInterval(loadStagesData, 10000);
                isAutoRefresh = true;
                $('#autoRefreshBtn').removeClass('btn-outline-secondary').addClass('btn-success')
                    .html('<i class="bi bi-arrow-clockwise"></i> Автообновление ВКЛ');
            }
        }

        // Обновление статистики
        function updateStatistics(stages) {
            const completed = stages.filter(s => s.status === 'Completed').length;
            const inProgress = stages.filter(s => s.status === 'InProgress').length;
            const pending = stages.filter(s => s.status === 'Pending' || s.status === 'Waiting').length;
            const total = stages.length;

            $('#completed-stages').text(completed);
            $('#progress-stages').text(inProgress);
            $('#pending-stages').text(pending);
            $('#total-stages').text(total);

            const completionPercent = total > 0 ? Math.round((completed / total) * 100) : 0;
            $('#completion-percent').text(completionPercent + '%');

            // Обновляем прогресс-бары
            $('#progress-completed').css('width', (completed / Math.max(1, total)) * 100 + '%').text(completed);
            $('#progress-active').css('width', (inProgress / Math.max(1, total)) * 100 + '%').text(inProgress);
        }

        // Форматирование даты и времени
        function formatDateTime(dateString) {
            const date = new Date(dateString);
            return date.toLocaleString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        // Показ уведомлений
        function showNotification(message, type) {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const alert = $(`
                        <div class="alert ${alertClass} alert-dismissible fade show position-fixed"
                             style="top: 20px; right: 20px; z-index: 9999; min-width: 300px;">
                            ${message}
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    `);

            $('body').append(alert);

            // Автоматически убираем через 5 секунд
            setTimeout(() => {
                alert.alert('close');
            }, 5000);
        }

        // Быстрые действия
        function startAllReadyStages() {
            const pendingStages = $('tr[data-status="Pending"]');

            if (pendingStages.length === 0) {
                showNotification('Нет этапов готовых к запуску', 'info');
                return;
            }

            if (confirm(`Запустить ${pendingStages.length} готовых этапов?`)) {
                let started = 0;
                pendingStages.each(function () {
                    const stageId = $(this).data('stage-id');
                    executeStageAction(stageId, 'start');
                    started++;
                });

                setTimeout(() => {
                    showNotification(`Запуск ${started} этапов инициирован`, 'success');
                    loadStagesData();
                }, 1000);
            }
        }

        function pauseAllActiveStages() {
            const activeStages = $('tr[data-status="InProgress"]');

            if (activeStages.length === 0) {
                showNotification('Нет активных этапов', 'info');
                return;
            }

            if (confirm(`Приостановить ${activeStages.length} активных этапов?`)) {
                activeStages.each(function () {
                    const stageId = $(this).data('stage-id');
                    executeStageAction(stageId, 'pause', 'Массовая приостановка');
                });

                setTimeout(() => {
                    showNotification('Этапы приостановлены', 'success');
                    loadStagesData();
                }, 1000);
            }
        }

        // Обновление данных
        function refreshStagesData() {
            loadStagesData();
            showNotification('Данные обновлены', 'success');
        }
    </script>
}

<style>
    .table tr.table-warning {
        --bs-table-accent-bg: var(--bs-warning-bg-subtle);
    }

    .btn-group-sm .btn {
        padding: 0.25rem 0.4rem;
        font-size: 0.75rem;
    }

    .position-fixed {
        position: fixed !important;
    }
</style>