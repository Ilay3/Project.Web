// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Project.Infrastructure.Data;

#nullable disable

namespace Project.Infrastructure.Migrations
{
    [DbContext(typeof(ManufacturingDbContext))]
    [Migration("20250522123038_InitialCreate3")]
    partial class InitialCreate3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Project.Domain.Entities.Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DetailId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("Project.Domain.Entities.Detail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Details");
                });

            modelBuilder.Entity("Project.Domain.Entities.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("InventoryNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MachineTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InventoryNumber")
                        .IsUnique();

                    b.HasIndex("MachineTypeId");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("Project.Domain.Entities.MachineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MachineTypes");
                });

            modelBuilder.Entity("Project.Domain.Entities.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DetailId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Project.Domain.Entities.RouteStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MachineTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("NormTime")
                        .HasColumnType("double precision");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.Property<double>("SetupTime")
                        .HasColumnType("double precision");

                    b.Property<string>("StageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MachineTypeId");

                    b.HasIndex("RouteId");

                    b.ToTable("RouteStages");
                });

            modelBuilder.Entity("Project.Domain.Entities.SetupTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FromDetailId")
                        .HasColumnType("integer");

                    b.Property<int>("MachineId")
                        .HasColumnType("integer");

                    b.Property<double>("Time")
                        .HasColumnType("double precision");

                    b.Property<int>("ToDetailId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FromDetailId");

                    b.HasIndex("ToDetailId");

                    b.HasIndex("MachineId", "FromDetailId", "ToDetailId")
                        .IsUnique();

                    b.ToTable("SetupTimes");
                });

            modelBuilder.Entity("Project.Domain.Entities.StageExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DeviceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("EndTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsProcessedByScheduler")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSetup")
                        .HasColumnType("boolean");

                    b.Property<string>("LastErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("MachineId")
                        .HasColumnType("integer");

                    b.Property<string>("OperatorId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("PauseTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int?>("QueuePosition")
                        .HasColumnType("integer");

                    b.Property<string>("ReasonNote")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ResumeTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RouteStageId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ScheduledStartTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StartAttempts")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StatusChangedTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SubBatchId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsProcessedByScheduler");

                    b.HasIndex("IsSetup");

                    b.HasIndex("MachineId");

                    b.HasIndex("RouteStageId");

                    b.HasIndex("ScheduledStartTimeUtc");

                    b.HasIndex("StartTimeUtc");

                    b.HasIndex("Status");

                    b.HasIndex("StatusChangedTimeUtc");

                    b.HasIndex("SubBatchId");

                    b.HasIndex("MachineId", "Status", "QueuePosition");

                    b.HasIndex("Status", "Priority", "ScheduledStartTimeUtc");

                    b.ToTable("StageExecutions");
                });

            modelBuilder.Entity("Project.Domain.Entities.SubBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BatchId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.ToTable("SubBatches");
                });

            modelBuilder.Entity("Project.Domain.Entities.Batch", b =>
                {
                    b.HasOne("Project.Domain.Entities.Detail", "Detail")
                        .WithMany()
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Detail");
                });

            modelBuilder.Entity("Project.Domain.Entities.Machine", b =>
                {
                    b.HasOne("Project.Domain.Entities.MachineType", "MachineType")
                        .WithMany("Machines")
                        .HasForeignKey("MachineTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MachineType");
                });

            modelBuilder.Entity("Project.Domain.Entities.Route", b =>
                {
                    b.HasOne("Project.Domain.Entities.Detail", "Detail")
                        .WithMany("Routes")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detail");
                });

            modelBuilder.Entity("Project.Domain.Entities.RouteStage", b =>
                {
                    b.HasOne("Project.Domain.Entities.MachineType", "MachineType")
                        .WithMany()
                        .HasForeignKey("MachineTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Domain.Entities.Route", "Route")
                        .WithMany("Stages")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MachineType");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Project.Domain.Entities.SetupTime", b =>
                {
                    b.HasOne("Project.Domain.Entities.Detail", "FromDetail")
                        .WithMany()
                        .HasForeignKey("FromDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Domain.Entities.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Domain.Entities.Detail", "ToDetail")
                        .WithMany()
                        .HasForeignKey("ToDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromDetail");

                    b.Navigation("Machine");

                    b.Navigation("ToDetail");
                });

            modelBuilder.Entity("Project.Domain.Entities.StageExecution", b =>
                {
                    b.HasOne("Project.Domain.Entities.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Project.Domain.Entities.RouteStage", "RouteStage")
                        .WithMany()
                        .HasForeignKey("RouteStageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Domain.Entities.SubBatch", "SubBatch")
                        .WithMany("StageExecutions")
                        .HasForeignKey("SubBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("RouteStage");

                    b.Navigation("SubBatch");
                });

            modelBuilder.Entity("Project.Domain.Entities.SubBatch", b =>
                {
                    b.HasOne("Project.Domain.Entities.Batch", "Batch")
                        .WithMany("SubBatches")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("Project.Domain.Entities.Batch", b =>
                {
                    b.Navigation("SubBatches");
                });

            modelBuilder.Entity("Project.Domain.Entities.Detail", b =>
                {
                    b.Navigation("Routes");
                });

            modelBuilder.Entity("Project.Domain.Entities.MachineType", b =>
                {
                    b.Navigation("Machines");
                });

            modelBuilder.Entity("Project.Domain.Entities.Route", b =>
                {
                    b.Navigation("Stages");
                });

            modelBuilder.Entity("Project.Domain.Entities.SubBatch", b =>
                {
                    b.Navigation("StageExecutions");
                });
#pragma warning restore 612, 618
        }
    }
}
